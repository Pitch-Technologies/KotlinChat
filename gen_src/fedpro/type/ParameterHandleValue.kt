// Code generated by Wire protocol buffer compiler, do not edit.
// Source: fedpro.ParameterHandleValue in DataTypes.proto
package fedpro.type

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class ParameterHandleValue(
  @field:WireField(
    tag = 1,
    adapter = "fedpro.type.ParameterHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val parameterHandle: ParameterHandle? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY,
    declaredName = "value",
    schemaIndex = 1,
  )
  public val value_: ByteString = ByteString.EMPTY,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ParameterHandleValue, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ParameterHandleValue) return false
    if (unknownFields != other.unknownFields) return false
    if (parameterHandle != other.parameterHandle) return false
    if (value_ != other.value_) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (parameterHandle?.hashCode() ?: 0)
      result = result * 37 + value_.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (parameterHandle != null) result += """parameterHandle=$parameterHandle"""
    result += """value_=$value_"""
    return result.joinToString(prefix = "ParameterHandleValue{", separator = ", ", postfix = "}")
  }

  public fun copy(
    parameterHandle: ParameterHandle? = this.parameterHandle,
    value_: ByteString = this.value_,
    unknownFields: ByteString = this.unknownFields,
  ): ParameterHandleValue = ParameterHandleValue(parameterHandle, value_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ParameterHandleValue> = object :
        ProtoAdapter<ParameterHandleValue>(
      FieldEncoding.LENGTH_DELIMITED, 
      ParameterHandleValue::class, 
      "type.googleapis.com/fedpro.ParameterHandleValue", 
      PROTO_3, 
      null, 
      "DataTypes.proto"
    ) {
      override fun encodedSize(`value`: ParameterHandleValue): Int {
        var size = value.unknownFields.size
        if (value.parameterHandle != null) size += ParameterHandle.ADAPTER.encodedSizeWithTag(1,
            value.parameterHandle)
        if (value.value_ != ByteString.EMPTY) size += ProtoAdapter.BYTES.encodedSizeWithTag(2,
            value.value_)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ParameterHandleValue) {
        if (value.parameterHandle != null) ParameterHandle.ADAPTER.encodeWithTag(writer, 1,
            value.parameterHandle)
        if (value.value_ != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
            value.value_)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ParameterHandleValue) {
        writer.writeBytes(value.unknownFields)
        if (value.value_ != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 2,
            value.value_)
        if (value.parameterHandle != null) ParameterHandle.ADAPTER.encodeWithTag(writer, 1,
            value.parameterHandle)
      }

      override fun decode(reader: ProtoReader): ParameterHandleValue {
        var parameterHandle: ParameterHandle? = null
        var value_: ByteString = ByteString.EMPTY
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> parameterHandle = ParameterHandle.ADAPTER.decode(reader)
            2 -> value_ = ProtoAdapter.BYTES.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ParameterHandleValue(
          parameterHandle = parameterHandle,
          value_ = value_,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ParameterHandleValue): ParameterHandleValue = value.copy(
        parameterHandle = value.parameterHandle?.let(ParameterHandle.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
