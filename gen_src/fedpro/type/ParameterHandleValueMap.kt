// Code generated by Wire protocol buffer compiler, do not edit.
// Source: fedpro.ParameterHandleValueMap in DataTypes.proto
package fedpro.type

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import okio.ByteString

/**
 * Map with ParameterHandle as key.
 * The map shall not contain duplicate keys.
 */
public class ParameterHandleValueMap(
  parameterHandleValue: List<ParameterHandleValue> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ParameterHandleValueMap, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "fedpro.type.ParameterHandleValue#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 0,
  )
  public val parameterHandleValue: List<ParameterHandleValue> =
      immutableCopyOf("parameterHandleValue", parameterHandleValue)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ParameterHandleValueMap) return false
    if (unknownFields != other.unknownFields) return false
    if (parameterHandleValue != other.parameterHandleValue) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + parameterHandleValue.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (parameterHandleValue.isNotEmpty()) result +=
        """parameterHandleValue=$parameterHandleValue"""
    return result.joinToString(prefix = "ParameterHandleValueMap{", separator = ", ", postfix = "}")
  }

  public fun copy(parameterHandleValue: List<ParameterHandleValue> = this.parameterHandleValue,
      unknownFields: ByteString = this.unknownFields): ParameterHandleValueMap =
      ParameterHandleValueMap(parameterHandleValue, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ParameterHandleValueMap> = object :
        ProtoAdapter<ParameterHandleValueMap>(
      FieldEncoding.LENGTH_DELIMITED, 
      ParameterHandleValueMap::class, 
      "type.googleapis.com/fedpro.ParameterHandleValueMap", 
      PROTO_3, 
      null, 
      "DataTypes.proto"
    ) {
      override fun encodedSize(`value`: ParameterHandleValueMap): Int {
        var size = value.unknownFields.size
        size += ParameterHandleValue.ADAPTER.asRepeated().encodedSizeWithTag(1,
            value.parameterHandleValue)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ParameterHandleValueMap) {
        ParameterHandleValue.ADAPTER.asRepeated().encodeWithTag(writer, 1,
            value.parameterHandleValue)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ParameterHandleValueMap) {
        writer.writeBytes(value.unknownFields)
        ParameterHandleValue.ADAPTER.asRepeated().encodeWithTag(writer, 1,
            value.parameterHandleValue)
      }

      override fun decode(reader: ProtoReader): ParameterHandleValueMap {
        val parameterHandleValue = mutableListOf<ParameterHandleValue>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> parameterHandleValue.add(ParameterHandleValue.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return ParameterHandleValueMap(
          parameterHandleValue = parameterHandleValue,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ParameterHandleValueMap): ParameterHandleValueMap = value.copy(
        parameterHandleValue =
            value.parameterHandleValue.redactElements(ParameterHandleValue.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
