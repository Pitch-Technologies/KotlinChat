// Code generated by Wire protocol buffer compiler, do not edit.
// Source: fedpro.FomModule in DataTypes.proto
package fedpro.type

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.countNonNull
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class FomModule(
  @field:WireField(
    tag = 1,
    adapter = "fedpro.type.FileFomModule#ADAPTER",
    declaredName = "file",
    oneofName = "fomModule",
    schemaIndex = 0,
  )
  public val file_: FileFomModule? = null,
  /**
   * FOM module compressed as a Zip file (ISO/IEC 21320-1)
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    oneofName = "fomModule",
    schemaIndex = 1,
  )
  public val compressedModule: ByteString? = null,
  /**
   * URL for the FOM module
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    oneofName = "fomModule",
    schemaIndex = 2,
  )
  public val url: String? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<FomModule, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(file_, compressedModule, url) <= 1) {
      "At most one of file_, compressedModule, url may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is FomModule) return false
    if (unknownFields != other.unknownFields) return false
    if (file_ != other.file_) return false
    if (compressedModule != other.compressedModule) return false
    if (url != other.url) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (file_?.hashCode() ?: 0)
      result = result * 37 + (compressedModule?.hashCode() ?: 0)
      result = result * 37 + (url?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (file_ != null) result += """file_=$file_"""
    if (compressedModule != null) result += """compressedModule=$compressedModule"""
    if (url != null) result += """url=${sanitize(url)}"""
    return result.joinToString(prefix = "FomModule{", separator = ", ", postfix = "}")
  }

  public fun copy(
    file_: FileFomModule? = this.file_,
    compressedModule: ByteString? = this.compressedModule,
    url: String? = this.url,
    unknownFields: ByteString = this.unknownFields,
  ): FomModule = FomModule(file_, compressedModule, url, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<FomModule> = object : ProtoAdapter<FomModule>(
      FieldEncoding.LENGTH_DELIMITED, 
      FomModule::class, 
      "type.googleapis.com/fedpro.FomModule", 
      PROTO_3, 
      null, 
      "DataTypes.proto"
    ) {
      override fun encodedSize(`value`: FomModule): Int {
        var size = value.unknownFields.size
        size += FileFomModule.ADAPTER.encodedSizeWithTag(1, value.file_)
        size += ProtoAdapter.BYTES.encodedSizeWithTag(2, value.compressedModule)
        size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.url)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: FomModule) {
        FileFomModule.ADAPTER.encodeWithTag(writer, 1, value.file_)
        ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.compressedModule)
        ProtoAdapter.STRING.encodeWithTag(writer, 3, value.url)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: FomModule) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.encodeWithTag(writer, 3, value.url)
        ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.compressedModule)
        FileFomModule.ADAPTER.encodeWithTag(writer, 1, value.file_)
      }

      override fun decode(reader: ProtoReader): FomModule {
        var file_: FileFomModule? = null
        var compressedModule: ByteString? = null
        var url: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> file_ = FileFomModule.ADAPTER.decode(reader)
            2 -> compressedModule = ProtoAdapter.BYTES.decode(reader)
            3 -> url = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return FomModule(
          file_ = file_,
          compressedModule = compressedModule,
          url = url,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: FomModule): FomModule = value.copy(
        file_ = value.file_?.let(FileFomModule.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
