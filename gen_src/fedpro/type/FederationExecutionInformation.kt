// Code generated by Wire protocol buffer compiler, do not edit.
// Source: fedpro.FederationExecutionInformation in DataTypes.proto
package fedpro.type

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class FederationExecutionInformation(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val federationExecutionName: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val logicalTimeImplementationName: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<FederationExecutionInformation, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is FederationExecutionInformation) return false
    if (unknownFields != other.unknownFields) return false
    if (federationExecutionName != other.federationExecutionName) return false
    if (logicalTimeImplementationName != other.logicalTimeImplementationName) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + federationExecutionName.hashCode()
      result = result * 37 + logicalTimeImplementationName.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    result += """federationExecutionName=${sanitize(federationExecutionName)}"""
    result += """logicalTimeImplementationName=${sanitize(logicalTimeImplementationName)}"""
    return result.joinToString(prefix = "FederationExecutionInformation{", separator = ", ", postfix
        = "}")
  }

  public fun copy(
    federationExecutionName: String = this.federationExecutionName,
    logicalTimeImplementationName: String = this.logicalTimeImplementationName,
    unknownFields: ByteString = this.unknownFields,
  ): FederationExecutionInformation = FederationExecutionInformation(federationExecutionName,
      logicalTimeImplementationName, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<FederationExecutionInformation> = object :
        ProtoAdapter<FederationExecutionInformation>(
      FieldEncoding.LENGTH_DELIMITED, 
      FederationExecutionInformation::class, 
      "type.googleapis.com/fedpro.FederationExecutionInformation", 
      PROTO_3, 
      null, 
      "DataTypes.proto"
    ) {
      override fun encodedSize(`value`: FederationExecutionInformation): Int {
        var size = value.unknownFields.size
        if (value.federationExecutionName != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1,
            value.federationExecutionName)
        if (value.logicalTimeImplementationName != "") size +=
            ProtoAdapter.STRING.encodedSizeWithTag(2, value.logicalTimeImplementationName)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: FederationExecutionInformation) {
        if (value.federationExecutionName != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.federationExecutionName)
        if (value.logicalTimeImplementationName != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.logicalTimeImplementationName)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: FederationExecutionInformation) {
        writer.writeBytes(value.unknownFields)
        if (value.logicalTimeImplementationName != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.logicalTimeImplementationName)
        if (value.federationExecutionName != "") ProtoAdapter.STRING.encodeWithTag(writer, 1,
            value.federationExecutionName)
      }

      override fun decode(reader: ProtoReader): FederationExecutionInformation {
        var federationExecutionName: String = ""
        var logicalTimeImplementationName: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> federationExecutionName = ProtoAdapter.STRING.decode(reader)
            2 -> logicalTimeImplementationName = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return FederationExecutionInformation(
          federationExecutionName = federationExecutionName,
          logicalTimeImplementationName = logicalTimeImplementationName,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: FederationExecutionInformation): FederationExecutionInformation =
          value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
