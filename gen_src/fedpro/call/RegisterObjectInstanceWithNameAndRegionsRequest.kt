// Code generated by Wire protocol buffer compiler, do not edit.
// Source: fedpro.RegisterObjectInstanceWithNameAndRegionsRequest in RtiAmbassador.proto
package fedpro.call

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import fedpro.type.AttributeSetRegionSetPairList
import fedpro.type.ObjectClassHandle
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class RegisterObjectInstanceWithNameAndRegionsRequest(
  @field:WireField(
    tag = 1,
    adapter = "fedpro.type.ObjectClassHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val theClass: ObjectClassHandle? = null,
  @field:WireField(
    tag = 2,
    adapter = "fedpro.type.AttributeSetRegionSetPairList#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val attributesAndRegions: AttributeSetRegionSetPairList? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val theObject: String = "",
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<RegisterObjectInstanceWithNameAndRegionsRequest, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RegisterObjectInstanceWithNameAndRegionsRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (theClass != other.theClass) return false
    if (attributesAndRegions != other.attributesAndRegions) return false
    if (theObject != other.theObject) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (theClass?.hashCode() ?: 0)
      result = result * 37 + (attributesAndRegions?.hashCode() ?: 0)
      result = result * 37 + theObject.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (theClass != null) result += """theClass=$theClass"""
    if (attributesAndRegions != null) result += """attributesAndRegions=$attributesAndRegions"""
    result += """theObject=${sanitize(theObject)}"""
    return result.joinToString(prefix = "RegisterObjectInstanceWithNameAndRegionsRequest{",
        separator = ", ", postfix = "}")
  }

  public fun copy(
    theClass: ObjectClassHandle? = this.theClass,
    attributesAndRegions: AttributeSetRegionSetPairList? = this.attributesAndRegions,
    theObject: String = this.theObject,
    unknownFields: ByteString = this.unknownFields,
  ): RegisterObjectInstanceWithNameAndRegionsRequest =
      RegisterObjectInstanceWithNameAndRegionsRequest(theClass, attributesAndRegions, theObject,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<RegisterObjectInstanceWithNameAndRegionsRequest> = object :
        ProtoAdapter<RegisterObjectInstanceWithNameAndRegionsRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      RegisterObjectInstanceWithNameAndRegionsRequest::class, 
      "type.googleapis.com/fedpro.RegisterObjectInstanceWithNameAndRegionsRequest", 
      PROTO_3, 
      null, 
      "RtiAmbassador.proto"
    ) {
      override fun encodedSize(`value`: RegisterObjectInstanceWithNameAndRegionsRequest): Int {
        var size = value.unknownFields.size
        if (value.theClass != null) size += ObjectClassHandle.ADAPTER.encodedSizeWithTag(1,
            value.theClass)
        if (value.attributesAndRegions != null) size +=
            AttributeSetRegionSetPairList.ADAPTER.encodedSizeWithTag(2, value.attributesAndRegions)
        if (value.theObject != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.theObject)
        return size
      }

      override fun encode(writer: ProtoWriter,
          `value`: RegisterObjectInstanceWithNameAndRegionsRequest) {
        if (value.theClass != null) ObjectClassHandle.ADAPTER.encodeWithTag(writer, 1,
            value.theClass)
        if (value.attributesAndRegions != null)
            AttributeSetRegionSetPairList.ADAPTER.encodeWithTag(writer, 2,
            value.attributesAndRegions)
        if (value.theObject != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.theObject)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter,
          `value`: RegisterObjectInstanceWithNameAndRegionsRequest) {
        writer.writeBytes(value.unknownFields)
        if (value.theObject != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.theObject)
        if (value.attributesAndRegions != null)
            AttributeSetRegionSetPairList.ADAPTER.encodeWithTag(writer, 2,
            value.attributesAndRegions)
        if (value.theClass != null) ObjectClassHandle.ADAPTER.encodeWithTag(writer, 1,
            value.theClass)
      }

      override fun decode(reader: ProtoReader): RegisterObjectInstanceWithNameAndRegionsRequest {
        var theClass: ObjectClassHandle? = null
        var attributesAndRegions: AttributeSetRegionSetPairList? = null
        var theObject: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> theClass = ObjectClassHandle.ADAPTER.decode(reader)
            2 -> attributesAndRegions = AttributeSetRegionSetPairList.ADAPTER.decode(reader)
            3 -> theObject = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return RegisterObjectInstanceWithNameAndRegionsRequest(
          theClass = theClass,
          attributesAndRegions = attributesAndRegions,
          theObject = theObject,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: RegisterObjectInstanceWithNameAndRegionsRequest):
          RegisterObjectInstanceWithNameAndRegionsRequest = value.copy(
        theClass = value.theClass?.let(ObjectClassHandle.ADAPTER::redact),
        attributesAndRegions =
            value.attributesAndRegions?.let(AttributeSetRegionSetPairList.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
