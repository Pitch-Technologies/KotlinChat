// Code generated by Wire protocol buffer compiler, do not edit.
// Source: fedpro.ReflectAttributeValuesWithRetraction in FederateAmbassador.proto
package fedpro.callback

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import fedpro.type.AttributeHandleValueMap
import fedpro.type.LogicalTime
import fedpro.type.MessageRetractionHandle
import fedpro.type.ObjectInstanceHandle
import fedpro.type.OrderType
import fedpro.type.SupplementalReflectInfo
import fedpro.type.TransportationTypeHandle
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class ReflectAttributeValuesWithRetraction(
  @field:WireField(
    tag = 1,
    adapter = "fedpro.type.ObjectInstanceHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val theObject: ObjectInstanceHandle? = null,
  @field:WireField(
    tag = 2,
    adapter = "fedpro.type.AttributeHandleValueMap#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val theAttributes: AttributeHandleValueMap? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val userSuppliedTag: ByteString = ByteString.EMPTY,
  @field:WireField(
    tag = 4,
    adapter = "fedpro.type.OrderType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 3,
  )
  public val sentOrdering: OrderType = OrderType.RECEIVE,
  @field:WireField(
    tag = 5,
    adapter = "fedpro.type.TransportationTypeHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 4,
  )
  public val theTransport: TransportationTypeHandle? = null,
  @field:WireField(
    tag = 6,
    adapter = "fedpro.type.LogicalTime#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 5,
  )
  public val theTime: LogicalTime? = null,
  @field:WireField(
    tag = 7,
    adapter = "fedpro.type.OrderType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 6,
  )
  public val receivedOrdering: OrderType = OrderType.RECEIVE,
  @field:WireField(
    tag = 8,
    adapter = "fedpro.type.MessageRetractionHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 7,
  )
  public val retractionHandle: MessageRetractionHandle? = null,
  @field:WireField(
    tag = 9,
    adapter = "fedpro.type.SupplementalReflectInfo#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 8,
  )
  public val reflectInfo: SupplementalReflectInfo? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ReflectAttributeValuesWithRetraction, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ReflectAttributeValuesWithRetraction) return false
    if (unknownFields != other.unknownFields) return false
    if (theObject != other.theObject) return false
    if (theAttributes != other.theAttributes) return false
    if (userSuppliedTag != other.userSuppliedTag) return false
    if (sentOrdering != other.sentOrdering) return false
    if (theTransport != other.theTransport) return false
    if (theTime != other.theTime) return false
    if (receivedOrdering != other.receivedOrdering) return false
    if (retractionHandle != other.retractionHandle) return false
    if (reflectInfo != other.reflectInfo) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (theObject?.hashCode() ?: 0)
      result = result * 37 + (theAttributes?.hashCode() ?: 0)
      result = result * 37 + userSuppliedTag.hashCode()
      result = result * 37 + sentOrdering.hashCode()
      result = result * 37 + (theTransport?.hashCode() ?: 0)
      result = result * 37 + (theTime?.hashCode() ?: 0)
      result = result * 37 + receivedOrdering.hashCode()
      result = result * 37 + (retractionHandle?.hashCode() ?: 0)
      result = result * 37 + (reflectInfo?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (theObject != null) result += """theObject=$theObject"""
    if (theAttributes != null) result += """theAttributes=$theAttributes"""
    result += """userSuppliedTag=$userSuppliedTag"""
    result += """sentOrdering=$sentOrdering"""
    if (theTransport != null) result += """theTransport=$theTransport"""
    if (theTime != null) result += """theTime=$theTime"""
    result += """receivedOrdering=$receivedOrdering"""
    if (retractionHandle != null) result += """retractionHandle=$retractionHandle"""
    if (reflectInfo != null) result += """reflectInfo=$reflectInfo"""
    return result.joinToString(prefix = "ReflectAttributeValuesWithRetraction{", separator = ", ",
        postfix = "}")
  }

  public fun copy(
    theObject: ObjectInstanceHandle? = this.theObject,
    theAttributes: AttributeHandleValueMap? = this.theAttributes,
    userSuppliedTag: ByteString = this.userSuppliedTag,
    sentOrdering: OrderType = this.sentOrdering,
    theTransport: TransportationTypeHandle? = this.theTransport,
    theTime: LogicalTime? = this.theTime,
    receivedOrdering: OrderType = this.receivedOrdering,
    retractionHandle: MessageRetractionHandle? = this.retractionHandle,
    reflectInfo: SupplementalReflectInfo? = this.reflectInfo,
    unknownFields: ByteString = this.unknownFields,
  ): ReflectAttributeValuesWithRetraction = ReflectAttributeValuesWithRetraction(theObject,
      theAttributes, userSuppliedTag, sentOrdering, theTransport, theTime, receivedOrdering,
      retractionHandle, reflectInfo, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ReflectAttributeValuesWithRetraction> = object :
        ProtoAdapter<ReflectAttributeValuesWithRetraction>(
      FieldEncoding.LENGTH_DELIMITED, 
      ReflectAttributeValuesWithRetraction::class, 
      "type.googleapis.com/fedpro.ReflectAttributeValuesWithRetraction", 
      PROTO_3, 
      null, 
      "FederateAmbassador.proto"
    ) {
      override fun encodedSize(`value`: ReflectAttributeValuesWithRetraction): Int {
        var size = value.unknownFields.size
        if (value.theObject != null) size += ObjectInstanceHandle.ADAPTER.encodedSizeWithTag(1,
            value.theObject)
        if (value.theAttributes != null) size +=
            AttributeHandleValueMap.ADAPTER.encodedSizeWithTag(2, value.theAttributes)
        if (value.userSuppliedTag != ByteString.EMPTY) size +=
            ProtoAdapter.BYTES.encodedSizeWithTag(3, value.userSuppliedTag)
        if (value.sentOrdering != OrderType.RECEIVE) size += OrderType.ADAPTER.encodedSizeWithTag(4,
            value.sentOrdering)
        if (value.theTransport != null) size +=
            TransportationTypeHandle.ADAPTER.encodedSizeWithTag(5, value.theTransport)
        if (value.theTime != null) size += LogicalTime.ADAPTER.encodedSizeWithTag(6, value.theTime)
        if (value.receivedOrdering != OrderType.RECEIVE) size +=
            OrderType.ADAPTER.encodedSizeWithTag(7, value.receivedOrdering)
        if (value.retractionHandle != null) size +=
            MessageRetractionHandle.ADAPTER.encodedSizeWithTag(8, value.retractionHandle)
        if (value.reflectInfo != null) size += SupplementalReflectInfo.ADAPTER.encodedSizeWithTag(9,
            value.reflectInfo)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ReflectAttributeValuesWithRetraction) {
        if (value.theObject != null) ObjectInstanceHandle.ADAPTER.encodeWithTag(writer, 1,
            value.theObject)
        if (value.theAttributes != null) AttributeHandleValueMap.ADAPTER.encodeWithTag(writer, 2,
            value.theAttributes)
        if (value.userSuppliedTag != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 3,
            value.userSuppliedTag)
        if (value.sentOrdering != OrderType.RECEIVE) OrderType.ADAPTER.encodeWithTag(writer, 4,
            value.sentOrdering)
        if (value.theTransport != null) TransportationTypeHandle.ADAPTER.encodeWithTag(writer, 5,
            value.theTransport)
        if (value.theTime != null) LogicalTime.ADAPTER.encodeWithTag(writer, 6, value.theTime)
        if (value.receivedOrdering != OrderType.RECEIVE) OrderType.ADAPTER.encodeWithTag(writer, 7,
            value.receivedOrdering)
        if (value.retractionHandle != null) MessageRetractionHandle.ADAPTER.encodeWithTag(writer, 8,
            value.retractionHandle)
        if (value.reflectInfo != null) SupplementalReflectInfo.ADAPTER.encodeWithTag(writer, 9,
            value.reflectInfo)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter,
          `value`: ReflectAttributeValuesWithRetraction) {
        writer.writeBytes(value.unknownFields)
        if (value.reflectInfo != null) SupplementalReflectInfo.ADAPTER.encodeWithTag(writer, 9,
            value.reflectInfo)
        if (value.retractionHandle != null) MessageRetractionHandle.ADAPTER.encodeWithTag(writer, 8,
            value.retractionHandle)
        if (value.receivedOrdering != OrderType.RECEIVE) OrderType.ADAPTER.encodeWithTag(writer, 7,
            value.receivedOrdering)
        if (value.theTime != null) LogicalTime.ADAPTER.encodeWithTag(writer, 6, value.theTime)
        if (value.theTransport != null) TransportationTypeHandle.ADAPTER.encodeWithTag(writer, 5,
            value.theTransport)
        if (value.sentOrdering != OrderType.RECEIVE) OrderType.ADAPTER.encodeWithTag(writer, 4,
            value.sentOrdering)
        if (value.userSuppliedTag != ByteString.EMPTY) ProtoAdapter.BYTES.encodeWithTag(writer, 3,
            value.userSuppliedTag)
        if (value.theAttributes != null) AttributeHandleValueMap.ADAPTER.encodeWithTag(writer, 2,
            value.theAttributes)
        if (value.theObject != null) ObjectInstanceHandle.ADAPTER.encodeWithTag(writer, 1,
            value.theObject)
      }

      override fun decode(reader: ProtoReader): ReflectAttributeValuesWithRetraction {
        var theObject: ObjectInstanceHandle? = null
        var theAttributes: AttributeHandleValueMap? = null
        var userSuppliedTag: ByteString = ByteString.EMPTY
        var sentOrdering: OrderType = OrderType.RECEIVE
        var theTransport: TransportationTypeHandle? = null
        var theTime: LogicalTime? = null
        var receivedOrdering: OrderType = OrderType.RECEIVE
        var retractionHandle: MessageRetractionHandle? = null
        var reflectInfo: SupplementalReflectInfo? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> theObject = ObjectInstanceHandle.ADAPTER.decode(reader)
            2 -> theAttributes = AttributeHandleValueMap.ADAPTER.decode(reader)
            3 -> userSuppliedTag = ProtoAdapter.BYTES.decode(reader)
            4 -> try {
              sentOrdering = OrderType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            5 -> theTransport = TransportationTypeHandle.ADAPTER.decode(reader)
            6 -> theTime = LogicalTime.ADAPTER.decode(reader)
            7 -> try {
              receivedOrdering = OrderType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            8 -> retractionHandle = MessageRetractionHandle.ADAPTER.decode(reader)
            9 -> reflectInfo = SupplementalReflectInfo.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ReflectAttributeValuesWithRetraction(
          theObject = theObject,
          theAttributes = theAttributes,
          userSuppliedTag = userSuppliedTag,
          sentOrdering = sentOrdering,
          theTransport = theTransport,
          theTime = theTime,
          receivedOrdering = receivedOrdering,
          retractionHandle = retractionHandle,
          reflectInfo = reflectInfo,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ReflectAttributeValuesWithRetraction):
          ReflectAttributeValuesWithRetraction = value.copy(
        theObject = value.theObject?.let(ObjectInstanceHandle.ADAPTER::redact),
        theAttributes = value.theAttributes?.let(AttributeHandleValueMap.ADAPTER::redact),
        theTransport = value.theTransport?.let(TransportationTypeHandle.ADAPTER::redact),
        theTime = value.theTime?.let(LogicalTime.ADAPTER::redact),
        retractionHandle = value.retractionHandle?.let(MessageRetractionHandle.ADAPTER::redact),
        reflectInfo = value.reflectInfo?.let(SupplementalReflectInfo.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
