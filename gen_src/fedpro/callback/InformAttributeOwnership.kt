// Code generated by Wire protocol buffer compiler, do not edit.
// Source: fedpro.InformAttributeOwnership in FederateAmbassador.proto
package fedpro.callback

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import fedpro.type.AttributeHandleSet
import fedpro.type.FederateHandle
import fedpro.type.ObjectInstanceHandle
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class InformAttributeOwnership(
  @field:WireField(
    tag = 1,
    adapter = "fedpro.type.ObjectInstanceHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val theObject: ObjectInstanceHandle? = null,
  @field:WireField(
    tag = 2,
    adapter = "fedpro.type.AttributeHandleSet#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val theAttributes: AttributeHandleSet? = null,
  @field:WireField(
    tag = 3,
    adapter = "fedpro.type.FederateHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val theOwner: FederateHandle? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<InformAttributeOwnership, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is InformAttributeOwnership) return false
    if (unknownFields != other.unknownFields) return false
    if (theObject != other.theObject) return false
    if (theAttributes != other.theAttributes) return false
    if (theOwner != other.theOwner) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (theObject?.hashCode() ?: 0)
      result = result * 37 + (theAttributes?.hashCode() ?: 0)
      result = result * 37 + (theOwner?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (theObject != null) result += """theObject=$theObject"""
    if (theAttributes != null) result += """theAttributes=$theAttributes"""
    if (theOwner != null) result += """theOwner=$theOwner"""
    return result.joinToString(prefix = "InformAttributeOwnership{", separator = ", ", postfix =
        "}")
  }

  public fun copy(
    theObject: ObjectInstanceHandle? = this.theObject,
    theAttributes: AttributeHandleSet? = this.theAttributes,
    theOwner: FederateHandle? = this.theOwner,
    unknownFields: ByteString = this.unknownFields,
  ): InformAttributeOwnership = InformAttributeOwnership(theObject, theAttributes, theOwner,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<InformAttributeOwnership> = object :
        ProtoAdapter<InformAttributeOwnership>(
      FieldEncoding.LENGTH_DELIMITED, 
      InformAttributeOwnership::class, 
      "type.googleapis.com/fedpro.InformAttributeOwnership", 
      PROTO_3, 
      null, 
      "FederateAmbassador.proto"
    ) {
      override fun encodedSize(`value`: InformAttributeOwnership): Int {
        var size = value.unknownFields.size
        if (value.theObject != null) size += ObjectInstanceHandle.ADAPTER.encodedSizeWithTag(1,
            value.theObject)
        if (value.theAttributes != null) size += AttributeHandleSet.ADAPTER.encodedSizeWithTag(2,
            value.theAttributes)
        if (value.theOwner != null) size += FederateHandle.ADAPTER.encodedSizeWithTag(3,
            value.theOwner)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: InformAttributeOwnership) {
        if (value.theObject != null) ObjectInstanceHandle.ADAPTER.encodeWithTag(writer, 1,
            value.theObject)
        if (value.theAttributes != null) AttributeHandleSet.ADAPTER.encodeWithTag(writer, 2,
            value.theAttributes)
        if (value.theOwner != null) FederateHandle.ADAPTER.encodeWithTag(writer, 3, value.theOwner)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: InformAttributeOwnership) {
        writer.writeBytes(value.unknownFields)
        if (value.theOwner != null) FederateHandle.ADAPTER.encodeWithTag(writer, 3, value.theOwner)
        if (value.theAttributes != null) AttributeHandleSet.ADAPTER.encodeWithTag(writer, 2,
            value.theAttributes)
        if (value.theObject != null) ObjectInstanceHandle.ADAPTER.encodeWithTag(writer, 1,
            value.theObject)
      }

      override fun decode(reader: ProtoReader): InformAttributeOwnership {
        var theObject: ObjectInstanceHandle? = null
        var theAttributes: AttributeHandleSet? = null
        var theOwner: FederateHandle? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> theObject = ObjectInstanceHandle.ADAPTER.decode(reader)
            2 -> theAttributes = AttributeHandleSet.ADAPTER.decode(reader)
            3 -> theOwner = FederateHandle.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return InformAttributeOwnership(
          theObject = theObject,
          theAttributes = theAttributes,
          theOwner = theOwner,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: InformAttributeOwnership): InformAttributeOwnership = value.copy(
        theObject = value.theObject?.let(ObjectInstanceHandle.ADAPTER::redact),
        theAttributes = value.theAttributes?.let(AttributeHandleSet.ADAPTER::redact),
        theOwner = value.theOwner?.let(FederateHandle.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
