// Code generated by Wire protocol buffer compiler, do not edit.
// Source: fedpro.CallbackResponse in FederateAmbassador.proto
package fedpro.callback

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.countNonNull
import fedpro.type.ExceptionData
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class CallbackResponse(
  @field:WireField(
    tag = 1,
    adapter = "fedpro.callback.CallbackSucceeded#ADAPTER",
    oneofName = "callbackResponse",
    schemaIndex = 0,
  )
  public val callbackSucceeded: CallbackSucceeded? = null,
  @field:WireField(
    tag = 2,
    adapter = "fedpro.type.ExceptionData#ADAPTER",
    oneofName = "callbackResponse",
    schemaIndex = 1,
  )
  public val callbackFailed: ExceptionData? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<CallbackResponse, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(callbackSucceeded, callbackFailed) <= 1) {
      "At most one of callbackSucceeded, callbackFailed may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CallbackResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (callbackSucceeded != other.callbackSucceeded) return false
    if (callbackFailed != other.callbackFailed) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (callbackSucceeded?.hashCode() ?: 0)
      result = result * 37 + (callbackFailed?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (callbackSucceeded != null) result += """callbackSucceeded=$callbackSucceeded"""
    if (callbackFailed != null) result += """callbackFailed=$callbackFailed"""
    return result.joinToString(prefix = "CallbackResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    callbackSucceeded: CallbackSucceeded? = this.callbackSucceeded,
    callbackFailed: ExceptionData? = this.callbackFailed,
    unknownFields: ByteString = this.unknownFields,
  ): CallbackResponse = CallbackResponse(callbackSucceeded, callbackFailed, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<CallbackResponse> = object : ProtoAdapter<CallbackResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      CallbackResponse::class, 
      "type.googleapis.com/fedpro.CallbackResponse", 
      PROTO_3, 
      null, 
      "FederateAmbassador.proto"
    ) {
      override fun encodedSize(`value`: CallbackResponse): Int {
        var size = value.unknownFields.size
        size += CallbackSucceeded.ADAPTER.encodedSizeWithTag(1, value.callbackSucceeded)
        size += ExceptionData.ADAPTER.encodedSizeWithTag(2, value.callbackFailed)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: CallbackResponse) {
        CallbackSucceeded.ADAPTER.encodeWithTag(writer, 1, value.callbackSucceeded)
        ExceptionData.ADAPTER.encodeWithTag(writer, 2, value.callbackFailed)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: CallbackResponse) {
        writer.writeBytes(value.unknownFields)
        ExceptionData.ADAPTER.encodeWithTag(writer, 2, value.callbackFailed)
        CallbackSucceeded.ADAPTER.encodeWithTag(writer, 1, value.callbackSucceeded)
      }

      override fun decode(reader: ProtoReader): CallbackResponse {
        var callbackSucceeded: CallbackSucceeded? = null
        var callbackFailed: ExceptionData? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> callbackSucceeded = CallbackSucceeded.ADAPTER.decode(reader)
            2 -> callbackFailed = ExceptionData.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return CallbackResponse(
          callbackSucceeded = callbackSucceeded,
          callbackFailed = callbackFailed,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: CallbackResponse): CallbackResponse = value.copy(
        callbackSucceeded = value.callbackSucceeded?.let(CallbackSucceeded.ADAPTER::redact),
        callbackFailed = value.callbackFailed?.let(ExceptionData.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
