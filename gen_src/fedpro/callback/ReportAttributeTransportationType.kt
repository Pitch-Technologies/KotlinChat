// Code generated by Wire protocol buffer compiler, do not edit.
// Source: fedpro.ReportAttributeTransportationType in FederateAmbassador.proto
package fedpro.callback

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import fedpro.type.AttributeHandle
import fedpro.type.ObjectInstanceHandle
import fedpro.type.TransportationTypeHandle
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import okio.ByteString

public class ReportAttributeTransportationType(
  @field:WireField(
    tag = 1,
    adapter = "fedpro.type.ObjectInstanceHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 0,
  )
  public val theObject: ObjectInstanceHandle? = null,
  @field:WireField(
    tag = 2,
    adapter = "fedpro.type.AttributeHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 1,
  )
  public val theAttribute: AttributeHandle? = null,
  @field:WireField(
    tag = 3,
    adapter = "fedpro.type.TransportationTypeHandle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    schemaIndex = 2,
  )
  public val theTransportation: TransportationTypeHandle? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ReportAttributeTransportationType, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ReportAttributeTransportationType) return false
    if (unknownFields != other.unknownFields) return false
    if (theObject != other.theObject) return false
    if (theAttribute != other.theAttribute) return false
    if (theTransportation != other.theTransportation) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (theObject?.hashCode() ?: 0)
      result = result * 37 + (theAttribute?.hashCode() ?: 0)
      result = result * 37 + (theTransportation?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (theObject != null) result += """theObject=$theObject"""
    if (theAttribute != null) result += """theAttribute=$theAttribute"""
    if (theTransportation != null) result += """theTransportation=$theTransportation"""
    return result.joinToString(prefix = "ReportAttributeTransportationType{", separator = ", ",
        postfix = "}")
  }

  public fun copy(
    theObject: ObjectInstanceHandle? = this.theObject,
    theAttribute: AttributeHandle? = this.theAttribute,
    theTransportation: TransportationTypeHandle? = this.theTransportation,
    unknownFields: ByteString = this.unknownFields,
  ): ReportAttributeTransportationType = ReportAttributeTransportationType(theObject, theAttribute,
      theTransportation, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ReportAttributeTransportationType> = object :
        ProtoAdapter<ReportAttributeTransportationType>(
      FieldEncoding.LENGTH_DELIMITED, 
      ReportAttributeTransportationType::class, 
      "type.googleapis.com/fedpro.ReportAttributeTransportationType", 
      PROTO_3, 
      null, 
      "FederateAmbassador.proto"
    ) {
      override fun encodedSize(`value`: ReportAttributeTransportationType): Int {
        var size = value.unknownFields.size
        if (value.theObject != null) size += ObjectInstanceHandle.ADAPTER.encodedSizeWithTag(1,
            value.theObject)
        if (value.theAttribute != null) size += AttributeHandle.ADAPTER.encodedSizeWithTag(2,
            value.theAttribute)
        if (value.theTransportation != null) size +=
            TransportationTypeHandle.ADAPTER.encodedSizeWithTag(3, value.theTransportation)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: ReportAttributeTransportationType) {
        if (value.theObject != null) ObjectInstanceHandle.ADAPTER.encodeWithTag(writer, 1,
            value.theObject)
        if (value.theAttribute != null) AttributeHandle.ADAPTER.encodeWithTag(writer, 2,
            value.theAttribute)
        if (value.theTransportation != null) TransportationTypeHandle.ADAPTER.encodeWithTag(writer,
            3, value.theTransportation)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: ReportAttributeTransportationType) {
        writer.writeBytes(value.unknownFields)
        if (value.theTransportation != null) TransportationTypeHandle.ADAPTER.encodeWithTag(writer,
            3, value.theTransportation)
        if (value.theAttribute != null) AttributeHandle.ADAPTER.encodeWithTag(writer, 2,
            value.theAttribute)
        if (value.theObject != null) ObjectInstanceHandle.ADAPTER.encodeWithTag(writer, 1,
            value.theObject)
      }

      override fun decode(reader: ProtoReader): ReportAttributeTransportationType {
        var theObject: ObjectInstanceHandle? = null
        var theAttribute: AttributeHandle? = null
        var theTransportation: TransportationTypeHandle? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> theObject = ObjectInstanceHandle.ADAPTER.decode(reader)
            2 -> theAttribute = AttributeHandle.ADAPTER.decode(reader)
            3 -> theTransportation = TransportationTypeHandle.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ReportAttributeTransportationType(
          theObject = theObject,
          theAttribute = theAttribute,
          theTransportation = theTransportation,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: ReportAttributeTransportationType):
          ReportAttributeTransportationType = value.copy(
        theObject = value.theObject?.let(ObjectInstanceHandle.ADAPTER::redact),
        theAttribute = value.theAttribute?.let(AttributeHandle.ADAPTER::redact),
        theTransportation = value.theTransportation?.let(TransportationTypeHandle.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
